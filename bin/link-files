#!/bin/bash

set -eu -o pipefail

function usage() {
    echo "Usage: ./link-files [--force-link | -f]"
}

force_link=""
while (( "$#" )); do
    case $1 in
        -f | --force-link) force_link=1 ;;
        *) usage; exit 1 ;;
    esac
    shift
done

dotfiles_dir="$(dirname "$(dirname "$(realpath "$0")")")"
home_mirror="${dotfiles_dir}/mirror"

function safe_link() {
    target=$1
    link=$2

    if [[ -e "$link" ]]; then
        if [[ -L "$link" ]] && [[ "$(readlink "$link")" == "$target" ]]; then
            echo "$link already links to target... ignoring"
        else
            if [[ "$force_link" -eq 1 ]]; then
                echo "WARN: $link already exists at dest... replacing with symlink"
                rm -r "$link"
                ln -s "$target" "$link"
            else
                echo "WARN: $link already exists at dest... ignoring"
            fi
        fi
    elif [[ ! -e "$target" ]]; then
        echo "$target does not exist in mirror... ignoring"
    else
        if [[ -L "$link" ]]; then
            echo "Removing broken symlink $link"
            rm "$link"
        fi
        echo "Adding symlink $link -> $target"
        mkdir -p "$(dirname "$link")"
        ln -s "$target" "$link"
    fi
}

safe_link "$dotfiles_dir" "$HOME/.dotfiles"

to_link=(
    vimrc
    profile
    bash_profile
    zprofile
    bashrc
    zshrc
    config/bash
    config/nvim
    config/tmux/tmux.conf
    config/git
    config/nixpkgs
    config/Code/User/settings.json
    config/Code/User/keybindings.json
    config/python
    ssh/config
)
for file in "${to_link[@]}"; do
    safe_link "$home_mirror/$file" "$HOME/.$file"
done

to_install=(
    smart-pandoc
)
for file in "${to_install[@]}"; do
    safe_link "$home_mirror/bin/$file" "$HOME/.local/bin/$file"
done
